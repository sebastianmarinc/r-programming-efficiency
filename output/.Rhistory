gender_vec <- c(gender_vec, rep(genders[i], 1e6 * gender[i]))
},
# vectorized
gender_vec =
rep(genders[1:n], 1e6 * gender[1:n])
)
gender_vec <- rep(genders[1:n], 1e6 * gender[1:n])
bfi_df$gender <- sample(gender_vec) #assigning proportions to gender vector on bfi_df. adding sample randomizes the order of the vector
# let's keep things proportional
age <- round(table(bfi$age)/nrow(bfi), digits = 5)
age #view age proportions
age_vec <- vector()
n <- length(age)
ages <- as.numeric(names(age))
age_vec <- rep(ages[1:n], 1e6 * age[1:n])
bfi_df$age <- sample(age_vec)
# let's keep things proportional
education <- round(table(bfi$education)/nrow(bfi), digits = 5)
education #view education proportions
education_vec <- c()
n <- length(education)
educations <- as.numeric(names(education))
education_vec <- rep(educations[1:n], 1e6 * education[1:n])
bfi_df$education <- sample(education_vec)
glimpse(bfi_df) #always check your data after manipulating the data frame before proceeding
bfi_tbl <- as_tibble(bfi_df)  #converting to tbl_df & dropping age
bfi_tbl_group <- bfi_tbl %>%  #grab tbl
pivot_longer(               #pivot BFI items
A1:O5,
names_to = "item",        #name gathered column
values_to = "score"       #name values columns
) %>%
select(-age, -education) %>% #drop age, edu columns
group_by(item)              #group by item
glimpse(bfi_tbl_group)
bfi_tbl_group_slice <-
bfi_tbl_group %>%
ungroup(item) %>%
slice(1:1000) %>%
group_by(item)
bfi_tbl_group_slice
bfi_tbl_long <-  bfi_tbl_group %>% slice(1:1000) #since it's still grouped  we can get the first 1000 rows per item
bfi_ls <- split(
bfi_tbl_long[, !names(bfi_tbl_long) == "item" ],  #split into list but remove the item variable
bfi_tbl_long$item #split on item variable
)
cl <- makeCluster(detectCores() - 1) #make a cluster but leave one core for other things like email
registerDoParallel(cl) #register the cluster to run in parallel
d_gender <-
foreach(i=1:25, .multicombine = T) %dopar% { #multicombine=T combines the output into a data frame
rstatix::cohens_d(bfi_ls[[i]], score ~ gender)
}
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
d_gender
bfi_tbl_long
cl <- makeCluster(detectCores() - 1) #make a cluster but leave one core for other things like email
registerDoParallel(cl) #register the cluster to run in parallel
d_gender <-
foreach(i=1:25) %dopar% {
rstatix::cohens_d(bfi_ls[[i]], score ~ gender)
}
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
rbindlist(d_gender)
bind_rows(d_gender)
benchmark(
bind_rows(d_gender),
rbindlist(d_gender),
replications = 10,
columns = c("test","elapsed"),
order = "elapsed"
)
?bind_rows
bfi_tbl_long <-  bfi_tbl_group %>% slice(1:5000) #since it's still grouped  we can get the first 1000 rows per item
bfi_ls <- split(
bfi_tbl_long[, !names(bfi_tbl_long) == "item" ],  #split into list but remove the item variable
bfi_tbl_long$item #split on item variable
)
cl <- makeCluster(detectCores() - 1) #make a cluster but leave one core for other things like email
registerDoParallel(cl) #register the cluster to run in parallel
d_gender <-
foreach(i=1:25) %dopar% {
rstatix::cohens_d(bfi_ls[[i]], score ~ gender)
}
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
system.time({
rstatix::cohens_d(bfi_tbl_long, score ~ gender)
})
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
system.time({
rstatix::cohens_d(bfi_tbl_long, score ~ gender)
})
system.timte({
cl <- makeCluster(detectCores() - 1) #make a cluster but leave one core for other things like email
registerDoParallel(cl) #register the cluster to run in parallel
d_gender <-
foreach(i=1:25) %dopar% {
rstatix::cohens_d(bfi_ls[[i]], score ~ gender)
}
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
})
system.time({
cl <- makeCluster(detectCores() - 1) #make a cluster but leave one core for other things like email
registerDoParallel(cl) #register the cluster to run in parallel
d_gender <-
foreach(i=1:25) %dopar% {
rstatix::cohens_d(bfi_ls[[i]], score ~ gender)
}
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
})
bfi_tbl_long <-  bfi_tbl_group %>% slice(1:1e5) #since it's still grouped  we can get the first 1000 rows per item
bfi_ls <- split(
bfi_tbl_long[, !names(bfi_tbl_long) == "item" ],  #split into list but remove the item variable
bfi_tbl_long$item #split on item variable
)
system.time({
rstatix::cohens_d(bfi_tbl_long, score ~ gender)
})
system.time({
cl <- makeCluster(detectCores() - 1) #make a cluster but leave one core for other things like email
registerDoParallel(cl) #register the cluster to run in parallel
d_gender <-
foreach(i=1:25) %dopar% {
rstatix::cohens_d(bfi_ls[[i]], score ~ gender)
}
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
})
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
bfi_tbl_long <-  bfi_tbl_group %>% slice(1:1000) #25k
bfi_tbl_long <-  bfi_tbl_group %>% slice(1:1e5) #2500k
# bfi_tbl_long <-  bfi_tbl_group %>% slice(1:1000) #25k
# bfi_tbl_long <-  bfi_tbl_group %>% slice(1:1e5)  #2.5 mil (2500k)
bfi_ls <- split(
bfi_tbl_long[, !names(bfi_tbl_long) == "item" ],  #split into list but remove the item variable
bfi_tbl_long$item #split on item variable
)
bfi_tbl_long <-  bfi_tbl_group %>% slice(1:1000) #25k
bfi_tbl_long <-  bfi_tbl_group %>% slice(1:1e5)  #2.5 mil (2500k)
bfi_ls <- split(
bfi_tbl_long[, !names(bfi_tbl_long) == "item" ],  #split into list but remove the item variable
bfi_tbl_long$item #split on item variable
)
system.time({
rstatix::cohens_d(bfi_tbl_long, score ~ gender)
})
system.time({
cl <- makeCluster(detectCores() - 1) #make a cluster but leave one core for other things like email
registerDoParallel(cl) #register the cluster to run in parallel
d_gender <-
foreach(i=1:25) %dopar% {
rstatix::cohens_d(bfi_ls[[i]], score ~ gender)
}
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
})
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
bfi_tbl_long <-  bfi_tbl_group %>% slice(1:1000) #25k
bfi_ls <- split(
bfi_tbl_long[, !names(bfi_tbl_long) == "item" ],  #split into list but remove the item variable
bfi_tbl_long$item #split on item variable
)
system.time({
rstatix::cohens_d(bfi_tbl_long, score ~ gender)
})
cl <- makeCluster(detectCores() - 1) #make a cluster but leave one core for other things like email
registerDoParallel(cl) #register the cluster to run in parallel
system.time({
d_gender <-
foreach(i=1:25) %dopar% {
rstatix::cohens_d(bfi_ls[[i]], score ~ gender)
}
})
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
stopImplicitCluster() #stop cluster
registerDoSEQ() #register cores to compute sequentially
bfi_tbl_long <-  bfi_tbl_group %>% slice(1:1000) #25k
bfi_ls <- split(
bfi_tbl_long[, !names(bfi_tbl_long) == "item" ],  #split into list but remove the item variable
bfi_tbl_long$item #split on item variable
)
system.time({
rstatix::cohens_d(bfi_tbl_long, score ~ gender)
})
registerDoParallel(detectCores() - 1) #register the cluster to run in parallel
system.time({
d_gender <-
foreach(i=1:25) %dopar% {
rstatix::cohens_d(bfi_ls[[i]], score ~ gender)
}
})
registerDoSEQ() #register cores to compute sequentially
bfi_tbl_long <-  bfi_tbl_group %>% slice(1:1e5)  #2.5 mil (2500k)
bfi_ls <- split(
bfi_tbl_long[, !names(bfi_tbl_long) == "item" ],  #split into list but remove the item variable
bfi_tbl_long$item #split on item variable
)
system.time({
rstatix::cohens_d(bfi_tbl_long, score ~ gender)
})
registerDoParallel(detectCores() - 1) #register the cluster to run in parallel
system.time({
d_gender <-
foreach(i=1:25) %dopar% {
rstatix::cohens_d(bfi_ls[[i]], score ~ gender)
}
})
registerDoSEQ() #register cores to compute sequentially
bfi_tbl_long <-  bfi_tbl_group %>% slice(1:1e6)  #2.5 mil (2500k)
rbindlist(d_gender)
benchmark(
dplyr::bind_rows(d_gender),
data.table::rbindlist(d_gender),
replications = 10,
columns = c("test","elapsed"),
order = "elapsed"
)
rbindlist(d_gender)
benchmark(
dplyr::bind_rows(d_gender),
data.table::rbindlist(d_gender) %>% as_tibble,
replications = 10,
columns = c("test","elapsed"),
order = "elapsed"
)
benchmark(
dplyr::bind_rows(d_gender),
data.table::rbindlist(d_gender) %>% as_tibble,
replications = 10,
columns = c("test","elapsed"),
order = "elapsed"
)
rbindlist(d_gender) %>% as_tibble()
tbl$letter
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #comment out when knitting the notebook
# let's start coding!
install.packages("pacman")
# let's start coding!
install.packages("pacman")
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #comment out when knitting the notebook
pacman::p_load(
tidyverse, psych, DT, doParallel, data.table, rbenchmark, benchmarkme, microbenchmark, vroom, disk.frame, knitr
)
opts_chunk$set(echo=T, cache=F, prompt=F, tidy=T, comment=NA, message=F, warning=F)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #comment out when knitting the notebook
pacman::p_load(
tidyverse, psych, DT, doParallel, data.table, rbenchmark, benchmarkme, microbenchmark, vroom, disk.frame, knitr
)
opts_chunk$set(echo=T, cache=F, prompt=F, tidy=T, comment=NA, message=F, warning=F)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #comment out when knitting the notebook
pacman::p_load(
tidyverse, psych, DT, doParallel, data.table, rbenchmark, benchmarkme, microbenchmark, vroom, disk.frame, knitr
)
opts_chunk$set(echo=T, cache=F, prompt=F, tidy=T, comment=NA, message=F, warning=F)
# get major and minor version and paste together
paste0(version$major, ".", version$minor)
# benchmarkme  should already be loaded in your global environment
paste("RAM:", disk.frame::df_ram_size(), "GB") #how much RAM are you working with?
paste("CPUs:", benchmarkme::get_cpu()[3]) #how many logical processors do you have?
benchmarkme::get_cpu()
benchmarkme::get_cpu()[3]
paste("CPUs:", benchmarkme::get_cpu()[3]) #how many logical processors do you have?
write_read_bench <- benchmark_io( size = 5 ) #read and write benchmark
plot(write_read_bench) #plot results
upload_results(write_read_bench) #upload results for benchmark tracking
1e5
n <- 1e5
col <- 100
get_random_df(n_elements = n, ncol = col)
get_random_df <-
function(n_elements, ncol, min = 0, max = 1, seed = 42) {
seed <- set.seed(seed)
n <- n_elements #number of elements in a vector
x <- runif(n, min = min, max = max) #random vector of real numbers
x <- matrix(x, ncol=ncol)
x <- as.data.frame(x)
return(x)
}
n <- 1e5
col <- 100
data <- get_random_df(n_elements = n, ncol = col)
get_random_df <-
function(n_elements, ncol, min = 0, max = 1, seed = 42) {
seed <- set.seed(seed)
n <- n_elements #number of elements in a vector
x <- runif(n, min = min, max = max) #random vector of real numbers
x <- matrix(x, ncol=ncol)
x <- as.data.frame(x)
return(x)
}
n <- 1e5
col <- 100
data <- get_random_df(n_elements = n, ncol = col)
rbenchmark::benchmark(
rds = saveRDS(data, "../data/data.rds"),
utils = write.csv(data, "../data/data_utils.csv"),
readr = write_csv(data, "../data/data_readr.csv"),
data.table = fwrite(data,"../data/data_dt.csv"),
vroom = vroom_write(data, "../data/data_vroom.csv"),
replications = 1,
columns = c('test', 'elapsed'),
order = 'elapsed'
)
benchmark(
rds = saveRDS(data, "../data/data.rds"),
utils = write.csv(data, "../data/data_utils.csv"),
readr = write_csv(data, "../data/data_readr.csv"),
data.table = fwrite(data,"../data/data_dt.csv"),
vroom = vroom_write(data, "../data/data_vroom.csv"),
replications = 1,
columns = c('test', 'elapsed'),
order = 'elapsed'
)
benchmark(
rds = saveRDS(data, "../data/data.rds"),
utils = write.csv(data, "../data/data_utils.csv"),
readr = write_csv(data, "../data/data_readr.csv"),
data.table = fwrite(data,"../data/data_dt.csv"),
vroom = vroom_write(data, "../data/data_vroom.csv"),
replications = 1,
columns = c('test', 'elapsed'),
order = 'elapsed'
)
benchmark(
rds = readRDS("../data/data.rds"),
utils = read.csv("../data/data_utils.csv"),
readr = read_csv("../data/data_readr.csv"),
data.table = fread("../data/data_dt.csv"),
vroom = vroom("../data/data_vroom.csv"),
replications = 1,
columns = c('test', 'elapsed'),
order = 'elapsed'
)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #comment out when knitting the notebook
pacman::p_load(
tidyverse, psych, DT, doParallel, data.table, rbenchmark, benchmarkme, microbenchmark, vroom, disk.frame, knitr
)
opts_chunk$set(echo=T, cache=F, prompt=F, tidy=T, comment=NA, message=F, warning=F)
# get major and minor version and paste together
paste0(version$major, ".", version$minor)
# benchmarkme  should already be loaded in your global environment
paste("RAM:", disk.frame::df_ram_size(), "GB") #how much RAM are you working with?
paste("CPUs:", benchmarkme::get_cpu()[3]) #how many logical processors do you have?
write_read_bench <- benchmark_io( size = 5 ) #read and write benchmark
plot(write_read_bench) #plot results
# this example was taken from section 3.2.1 of Efficient R Programming (2021)
n <- 1000
method1 = function(n) {
vec = NULL #or vec = c()
for (i in seq_len(n))
vec = c(vec, i)
vec
}
method2 = function(n) seq_len(n)
seq_len(n)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #comment out when knitting the notebook
pacman::p_load(
tidyverse, psych, DT, doParallel, data.table, rbenchmark, benchmarkme, microbenchmark, vroom, disk.frame, knitr
)
opts_chunk$set(echo=T, cache=F, prompt=F, tidy=T, comment=NA, message=F, warning=F)
# get major and minor version and paste together
paste0(version$major, ".", version$minor)
# benchmarkme  should already be loaded in your global environment
paste("RAM:", disk.frame::df_ram_size(), "GB") #how much RAM are you working with?
paste("CPUs:", benchmarkme::get_cpu()[3]) #how many logical processors do you have?
write_read_bench <- benchmark_io( size = 5 ) #read and write benchmark
