set.seed(9201994)
benchmark(
MASS::mvrnorm(1e7, mu, cov_m, empirical=T),
anMC::mvrnormArma(1e7, mu, cov_m, 0),
replications = 1,
columns = c('test', 'elapsed'),
order = 'elapsed'
) #benchmarking simulating 1mil cases of the sampled data set
pacman::p_load(tidyverse, psych, anMC, MASS, DT, doParallel, data.table, rbenchmark, knitr)
opts_chunk$set(echo=T,cache=F,prompt=F,tidy=T,comment=NA,message=T,warning=F)
# Print the R version details using version
version
# Assign the variable major to the major component
major <- version$major
# Assign the variable minor to the minor component
minor <- version$minor
# Assign the variable major to the major component
paste0(version$major,  version$minor)
# Assign the variable major to the major component
paste0(version$major, ".", version$minor)
# get major and minor version and paste together
paste0(version$major, ".", version$minor)
pacman::p_load(tidyverse, psych, anMC, MASS, DT, doParallel, data.table, rbenchmark, knitr)
opts_chunk$set(echo=T,cache=F,prompt=F,tidy=T,comment=NA,message=T,warning=F)
# get major and minor version and paste together
paste0(version$major, ".", version$minor)
?mvrnorm
mvrnorm
?psych::bfi
str(bfi)
set.seed(9201994)
benchmark(
MASS::mvrnorm(1e7, mu, cov_m, empirical=T),
anMC::mvrnormArma(1e7, mu, cov_m, 0),
replications = 1,
columns = c('test', 'elapsed'),
order = 'elapsed'
) #benchmarking simulating 1mil cases of the sampled data set
pacman::p_load(tidyverse, psych, anMC, MASS, DT, doParallel, data.table, rbenchmark, knitr)
opts_chunk$set(echo=T,cache=F,prompt=F,tidy=T,comment=NA,message=T,warning=F)
# get major and minor version and paste together
paste0(version$major, ".", version$minor)
data(bfi) #get data
str(bfi) #take a look at the data structure
bfi <- bfi[complete.cases(bfi),] #drop cases with at least 1 missing value
bfi <- subset(bfi, select= -c(gender, age, education)) #drop gender, age, edu columns
mu <- colMeans(bfi) #get variable means
sd <- apply(bfi, 2, sd) #get variable SDs
cor_m <- cor(bfi) #get correlation matrix
cov_m <- sd %*% t(sd) * cor_m #get covariance matrix
set.seed(9201994)
benchmark(
MASS::mvrnorm(1e7, mu, cov_m, empirical=T),
anMC::mvrnormArma(1e7, mu, cov_m, 0),
replications = 1,
columns = c('test', 'elapsed'),
order = 'elapsed'
) #benchmarking simulating 1mil cases of the sampled data set
data(bfi) #get data
str(bfi) #take a look at the data structure
bfi <- bfi[complete.cases(bfi),] #drop cases with at least 1 missing value
bfi <- subset(bfi, select= -c(gender, age, education)) #drop gender, age, edu columns
str(bfi) #calling the structure again to compare
mu <- colMeans(bfi) #get variable means
sd <- apply(bfi, 2, sd) #get variable SDs
cor_m <- cor(bfi) #get correlation matrix
cov_m <- sd %*% t(sd) * cor_m #get covariance matrix
bfi_m <- t(anMC::mvrnormArma(1e7, mu, cov_m, 0))
colnames(bfi_m) <- names(bfi)
bfi_df <- as.data.frame(bfi_m)
names(bfi_df) <- names(bfi)
pacman::p_load(data.tree)
data.tree::FindNode()
data.tree::ToDiagrammeRGraph()
??data.tree::ToDiagrammeRGraph()
data.tree::Get()
data.tree::Node
data.tree::Node()
data.tree:::plot.Node()
install.packages('DiagrammeR')
data.tree:::plot.Node()
?data.tree:::plot.Node()
list()
list.dirs()
list.files()
list2env()
dir()[file.info(dir())$isdir]
list.dirs('.', recursive=FALSE)
list.dirs('./', recursive=FALSE)
list.dirs('../', recursive=FALSE)
list.dirs('../', recursive=T)
list.dirs('../', recursive=F) %>% data.tree::as.Node()
list.dirs('../', recursive=F) %>% data.tree::ToDataFrameTree()
list.dirs('../', recursive=F) %>% data.tree::as.igraph.Node()
list.dirs('../', recursive=F) %>% data.tree::as.Node()
?data.tree::as.Node
list.dirs('../', recursive=F) %>% data.tree::as.Node
list.dirs('../', recursive=F) %>% data.tree::as.Node(.)
list.dirs('../../', recursive=F)
list.dirs('../', recursive=F)
tempdir()
list.dirs('../data', recursive=F)
benchmark(
#save data
saveRDS(bfi_m, "../data/bfi_m.rds"),
saveRDS(bfi_df, "../data/bfi_df.rds"),
#load data
readRDS("../data/bfi_m.rds"),
readRDS("../data/bfi_df.rds"),
replications = 1,
columns = c('test', 'elapsed'),
order = 'elapsed'
)
pacman::p_load(tidyverse, psych, anMC, MASS, DT, doParallel, data.table, rbenchmark, benchmarkme, knitr)
opts_chunk$set(echo=T,cache=F,prompt=F,tidy=T,comment=NA,message=T,warning=F)
# get major and minor version and paste together
paste0(version$major, ".", version$minor)
# benchmarkme  should already be loaded in your global environment
get_ram() #how much RAM are you working with?
get_cpu() #how many logical processors do you have?
# R version
# benchmarking
# Read, write times of csv (utils,readr,data.table), rds
# <- vs =
# elapsed time
# Relative time
# Vectorizing code
# Data frames and matrices
# Apply family
# Parallel apply
# examples  (bfi, sat) factor analysis, item analysis regression, hlm
data(bfi) #get data
str(bfi) #take a look at the data structure
bfi <- bfi[complete.cases(bfi),] #drop cases with at least 1 missing value
bfi <- subset(bfi, select= -c(gender, age, education)) #drop gender, age, edu columns
str(bfi) #calling the structure again to compare
mu <- colMeans(bfi) #get variable means
sd <- apply(bfi, 2, sd) #get variable SDs
cor_m <- cor(bfi) #get correlation matrix
cov_m <- sd %*% t(sd) * cor_m #get covariance matrix
set.seed(9201994)
benchmark(
MASS::mvrnorm(1e7, mu, cov_m, empirical=T),
anMC::mvrnormArma(1e7, mu, cov_m, 0),
replications = 1,
columns = c('test', 'elapsed'),
order = 'elapsed'
) #benchmarking simulating 1mil cases of the sampled data set
set.seed(9201994)
bfi_df <- as.data.frame( t(anMC::mvrnormArma(1e7, mu, cov_m, 0)) )
names(bfi_df) <- names(bfi)
plot(read_bench)
read_bench <- benchmark_io(runs=1, size=100)
The *benchmark_io* function allows outputs the time it takes to read in data depending on its size (units = megabtyes).
Let's practice reading in a 50MB file and plot the results.
```{r}
read_bench <- benchmark_io(runs=1, size=50)
plot(read_bench)
```
read_bench <- benchmark_io(runs=1, size=50)
plot(read_bench)
read_bench <- benchmark_io(runs=1, size=50)
plot(read_bench)
upload_results(read_bench)
n = 1e6
x = runif(n) + 1
as.matrix(x, ncols = 25)
x <- as.matrix(x, ncols = 25)
dim(x)
x <-  runif(n) + 1
x <- matrix(x, ncols = 25)
x <- matrix(x, ncol= 25)
dim(x)
x <- matrix(x, ncol= 100)
x <-  runif(n) + 1
x <- matrix(x, ncol= 100)
dim(x)
get_random_df <- function(n_elements, ncol) {
n <- n_elements
x <- runif(n) + 1
x <- matrix(x, ncol=ncol)
x <- as.data.frame(x)
return(x)
}
n_elements <- 1e5
ncol <- 100
n <- 1e5
col <- 100
data <- get_random_df(n_elements = n, ncol = col)
runif(n) + 1
mean(runif(n) + 1)
get_random_df <- function(n_elements, ncol, seed = 42) {
seed = set.seed(seed)
n <- n_elements #number of elements in a vector
x <- runif(n) + 1 #random vector of real numbers
x <- matrix(x, ncol=ncol)
x <- as.data.frame(x)
return(x)
}
n <- 1e5
col <- 100
data <- get_random_df(n_elements = n, ncol = col)
mean(runif(n) + 1)
sd(runif(n) + 1)
runif(n)
?runif
get_random_df <- function(n_elements, ncol, min = 0, max = 1, seed = 42) {
seed = set.seed(seed)
n <- n_elements #number of elements in a vector
x <- runif(n, min = min, max = max) #random vector of real numbers
x <- matrix(x, ncol=ncol)
x <- as.data.frame(x)
return(x)
}
n <- 1e5
col <- 100
data <- get_random_df(n_elements = n, ncol = col)
pacman::p_load(tidyverse, psych, anMC, MASS, DT, doParallel, data.table, rbenchmark, benchmarkme, vroom, knitr)
benchmark(
saveRDS(data, "../data/data.rds"),
write.csv(data, "../data/data_utils.csv"),
write_csv(data, "../data/data_readr.csv"),
fwrite(data,"../data/data_dt.csv"),
vroom_write(data, "../data/data_dt.csv"),
replications = 1,
columns = c('test', 'elapsed'),
order = 'elapsed'
)
benchmark(
readRDS(data, "../data/data.rds"),
read.csv(data, "../data/data_utils.csv"),
read_csv(data, "../data/data_readr.csv"),
fread(data,"../data/data_dt.csv"),
vroom(data, "../data/data.csv"),
replications = 1,
columns = c('test', 'elapsed'),
order = 'elapsed'
)
benchmark(
readRDS("../data/data.rds"),
read.csv("../data/data_utils.csv"),
read_csv("../data/data_readr.csv"),
fread("../data/data_dt.csv"),
vroom("../data/data.csv"),
replications = 1,
columns = c('test', 'elapsed'),
order = 'elapsed'
)
benchmark(
saveRDS(data, "../data/data.rds"),
write.csv(data, "../data/data_utils.csv"),
write_csv(data, "../data/data_readr.csv"),
fwrite(data,"../data/data_dt.csv"),
vroom_write(data, "../data/data_vroom.csv"),
replications = 1,
columns = c('test', 'elapsed'),
order = 'elapsed'
)
benchmark(
saveRDS(data, "../data/data.rds"),
write.csv(data, "../data/data_utils.csv"),
write_csv(data, "../data/data_readr.csv"),
fwrite(data,"../data/data_dt.csv"),
vroom_write(data, "../data/data_vroom.csv"),
replications = 1,
columns = c('test', 'elapsed'),
order = 'elapsed'
)
