tibble(
num = 1:100,
char = rep(c("x","y"), each = 50)
)
data.frame(
num = 1:100,
char = rep(c("x","y"), each = 50)
)
tibble(
num = 1:100,
char = rep(c("x","y"), each = 50)
)
df_base = data.frame(colA = "A")
df_base$colA
df_base$col
df_base$colB
tbl$char
tbl <- tibble(
num = 1:100,
char = rep(c("x","y"), each = 50)
)
tbl
tbl$char
tbl$letter
tibble$char %>% class
tibble$char %>% class(.)
class(tibble$char)
class(tbl$char)
class(tbl["char"])
class(tbl[["char"]])
df <- data.frame(
num = 1:100,
char = rep(c("x","y"), each = 50)
)
df
df$letter
class(df$char)
class(df["char"])
class(df[["char"]])
df
tbl
tbl <- tibble(
num = 1:100,
char = rep(c("x","y"), each = 50)
)
tbl
df <- data.frame(
num = 1:100,
char = rep(c("x","y"), each = 50)
)
df
class(tbl$char)
class(tbl["char"])
class(tbl[["char"]])
tbl$char
tbl["char"]
tbl[["char"]]
tbl$char
tbl["char"]
tbl[["char"]]
tbl$char == tbl[["char"]]
identical(tbl$char, tbl[["char"]])
identical(tbl$char, tbl["char"])
data %>% pivot_longer(education)
data %>% pivot_longer(education) %>% select(education)
data %>% pivot_longer(education, names_to = "education", values_to = "degree") %>% select(education,degree)
get_random_df(1, 1, 1, 5)
get_random_df(1000, 1, 1, 5)
get_random_df(1000, 1, 1, 5) %>%
rename(score = V1)
data$education
get_random_df(1000, 1, 1, 5) %>%
rename(score = V1) %>%
mutate(
phd = sample(rep(1,0), 500),
masters = sample(rep(1,0), 500),
college = sample(rep(1,0), 500),
high_school = sample(rep(1,0), 500)
)
binary <- sample(rep(c(1,0), 500))
binary <- sample(rep(c(1,0), 2000))
binary <- sample(rep(c(1,0), each = 2000))
n <- 1000
binary <- sample( rep(c(1,0), each = 2000) )
n <- nrow(df)
df <- get_random_df(1000, 1, 1, 5)
n <- nrow(df)
binary <- sample( rep(c(1,0), each = 2000) )
binary[n*3+1:n*4]
n*3+1
n*4
n*3
n*2+1
binary[n*3+1:n*4]
binary[4000]
make_binary <- function(x) sample(rep(c(1,0), each = 2000) )
make_binary()
make_binary <- function(x) sample( rep(c(1,0), each = 500) )
indentical(make_binary(), make_binary())
identical(make_binary(), make_binary())
df <- get_random_df(1000, 1, 1, 5)
n <- nrow(df)
make_binary <- function(x) sample( rep(c(1,0), each = 500) )
df <- df %>%
rename(score = V1) %>%
mutate(
phd = make_binary(),
masters = make_binary(),
college = make_binary(),
high_school = make_binary()
)
df
df %>% pivot_longer(phd:high_school,
names_to = "education"
)
df %>% pivot_longer(phd:high_school,
names_to = "highest_edu",
values_to = "edu"
)
df_long
df_long <- df %>%
pivot_longer(
phd:high_school, #variables to gather
names_to = "highest_edu", #name of gathered column
values_to = "edu" #name of values column
)
df_long
```{r}
df <- get_random_df(1000, 2, 1, 5)
n <- nrow(df)
make_binary <- function(x) sample( rep(c(1,0), each = 500) )
df <- df %>%
rename(score = V1,
performance = V2) %>%
mutate(
phd = make_binary(),
masters = make_binary(),
college = make_binary(),
high_school = make_binary()
)
df <- get_random_df(1000, 2, 1, 5)
df <- get_random_df(2000, 2, 1, 5)
n <- nrow(df)
make_binary <- function(x) sample( rep(c(1,0), each = 500) )
df <- df %>%
rename(score = V1,
performance = V2) %>%
mutate(
phd = make_binary(),
masters = make_binary(),
college = make_binary(),
high_school = make_binary()
)
df
df_long <- df %>%
pivot_longer(
phd:high_school, #variables to gather
names_to = "highest_edu", #name of gathered column
values_to = "edu" #name of values column
)
df_long
df_long %>%
group_by(education) %>%
lm(performance ~ score, data = .)
df_long %>%
group_by(highest_edu) %>%
lm(performance ~ score, data = .)
?do
df_long %>%
group_by(highest_edu) %>%
do( model = lm(performance ~ score, data = .) ) #do applies expression to each group that can range in complexity
df_long %>%
group_by(highest_edu) %>%
do( model = lm(performance ~ score, data = .) ) %>% #do applies expression to each group that can range in complexity
unnest(col = model)
df_long %>%
group_by(highest_edu) %>%
do( model = lm(performance ~ score, data = .) ) %>% #do applies expression to each group that can range in complexity
unnest(cols = model)
df_long %>%
group_by(highest_edu) %>%
do(model = lm(performance ~ score, data = .)) %>% #do applies expression to each group that can range in complexity
summarize(broom::tidy(model))
?tidy
df_long %>%
group_by(highest_edu) %>%
do(model = lm(performance ~ score, data = .)) %>% #do applies expression to each group that can range in complexity
summarize(broom::tidy.lm(model))
df_long %>%
group_by(highest_edu) %>%
do(model = lm(performance ~ score, data = .)) %>% #do applies expression to each group that can range in complexity
summarize(broom::tidy(model))
df_long %>%
group_by(highest_edu) %>%
do(model = lm(performance ~ score, data = .)) %>% #do applies expression to each group that can range in complexity
unnest()
df_long %>%
group_by(highest_edu) %>%
do(model = lm(performance ~ score, data = .)) %>% #do applies expression to each group that can range in complexity
unnest(model)
df_long %>%
group_by(highest_edu) %>%
do(model = lm(performance ~ score, data = .)) %>% #do applies expression to each group that can range in complexity
unnest(cols = model)
df_long %>%
group_by(highest_edu) %>%
do(model = lm(performance ~ score, data = .)) %>% #do applies expression to each group that can range in complexity
summarize(models)
?broom
df_long %>%
group_by(highest_edu) %>%
do(model = lm(performance ~ score, data = .)) %>% #do applies expression to each group that can range in complexity
summarize(broom::tidy(model)) #broom is a package that converts statistical objects into tibbles
df_long %>% unique(highest_edu)
df_long %>% count(highest_edu)
?do
df <- get_random_df(2000, 2, 1, 5)
n <- nrow(df)
make_binary <- function(x) sample( rep(c(1,0), each = 500) )
df <- df %>%
rename(score = V1,
performance = V2) %>%
mutate(
phd = make_binary(),
masters = make_binary(),
college = make_binary(),
high_school = make_binary()
)
df
df_long <- df %>%
pivot_longer(
phd:high_school, #variables to gather
names_to = "highest_edu", #name of gathered column
values_to = "edu" #name of values column
)
df_long
data_top %>% as_tibble
df %>% as_tibble()
df %>% as_tibble
?pivot_longer
?tidyverse
?separate
tibble(hs_uni = "phuhs;uf")
tibble(hs_uni_grad = "phuhs-uf-umn")
sep <- tibble(college_grad = "University of Florida - University of Minnesota, Twin Cities")
sep
separate(set, col = college_grad, into = c("college", "grad"), sep = "-")
separate(sep, col = college_grad, into = c("college", "grad"), sep = "-")
separate(sep, col = college_grad, into = c("college", "grad"), sep = " - ")
sep <- tibble(college_grad = "University of Florida - University of Minnesota, Twin Cities")
sep
separate(sep, col = college_grad, into = c("college", "grad"), sep = "-")
separate(sep, col = college_grad, into = c("college", "grad"), sep = " - ")
?group_by]
?group_by
summarize(tbl)
summarize(tbl, mean)
summarize(tbl, mean(x))
summarize(tbl, mean(.[[1]]))
summarize(tbl, mean(tbl[[1]]))
df_long %>%
distinct()
df_long %>%
distinct(score)
df_long %>%
distinct(highest_edu)
?group_by
?summarize
df
df %>%
group_by(phd, masters) %>%
summarize(mean_score = score, mean_performance = performance)
df %>%
group_by(phd, masters) %>%
summarize(mean_score = score, mean_performance = performance)
df %>%
group_by(phd, masters) %>%
summarize(mean_score = mean(score), mean_performance = mean(performance))
df %>%
group_by(phd, masters) %>%
summarize(mean_score = mean(score), mean_performance = mean(performance)) %>%
arrange(phd, -masters)
df %>%
mutate(across(where(is.numeric), as.character))
class(df[[1]])
class(df[1])
apply(df, 2, function(x) ifelse(class(x) == "numeric", as.character(x), as.numeric(x))
apply(df, 2, function(x) ifelse(class(x) == "numeric", as.character(x), as.numeric(x)))
apply(df[,cols], 2, function(x) as.numeric(as.character(x)))
apply(df, 2, function(x) as.character(is.numeric(x)))
df %>%
mutate(across(as.character)) #mutate across columns that are numeric class and change them to character classes
df %>%
mutate(across(., as.character)) #mutate across columns that are numeric class and change them to character classes
df %>%
mutate(across(everything(), as.character)) #mutate across columns that are numeric class and change them to character classes
apply(df, 2, as.character)
#mutate across columns that are numeric class and change them to character classes
benchmark(
dplyr = df %>% mutate(across(everything(), as.character)),
apply = apply(df, 2, as.character),
replications = 100,
columns = c("test","elapsed"),
order = "elapsed"
)
df %>% rowwise() %>% mutate(everthing(), as.character))
df %>% rowwise() %>% mutate(everthing(), as.character)
df %>% rowwise() %>% mutate(everything(), as.character)
df %>% rowwise() %>% mutate(as.character)
benchmark(
dplyr = df %>% mutate(across(everything(), as.character)),
apply = apply(df, 2, as.character),
replications = 100,
columns = c("test","elapsed"),
order = "elapsed"
)
? tstrsplit
two_cols = data.frame(x = 1:5, y = letters[1:5])
zero_cols = data.frame()
sapply(two_cols, class)  # a character vector
sapply(zero_cols, class) # a list
two_cols[, 1:2]          # a data.frame
two_cols[, 1]            # an integer vector
df2 = data.frame(x = 1:5, y = letters[1:5])
df0 = data.frame()
sapply(df2, class) #character vector
sapply(df0, class) #list
df2[, 1:2]         #data frame
df2[, 1]           # an integer vector
df2[, 1]           #numeric vector
split(df_long, df_long$highest_edu)
edu = split(df_long, df_long$highest_edu)
edu <- split(df_long, df_long$highest_edu)
mapply(sum, edu)
mapply(sum, edu[-1])
?edu[[1]]
edu[[1]]
mapply(sum, edu[-3])
mapply(make_binary())
mapply(rep(make_binary(), 4))
mapply(rep(make_binary(), 1:4))
set.seed(9201994)
bfi_df <- as.data.frame( t(anMC::mvrnormArma(1e6, mu, cov_m, 0)) )
rm(list = ls()) #clear the global environment
data(bfi) #get data
glimpse(bfi) #take a look at the data structure using glimpse from the tibble package
bfi <- bfi[complete.cases(bfi),] #drop cases with at least 1 missing value
bfi_trim <- bfi %>% select(-gender, -age, -education) #or subset(bfi, select= -c(gender, age, education)) to drop gender, age, edu columns
glimpse(bfi_trim) #check the structure again to compare
mu <- colMeans(bfi_trim) #get variable means
sd <- apply(bfi_trim, 2, sd) #get variable SDs
cor_m <- cor(bfi_trim) #get correlation matrix
cov_m <- sd %*% t(sd) * cor_m #get covariance matrix
set.seed(9201994)
bfi_df <- as.data.frame( t(anMC::mvrnormArma(1e6, mu, cov_m, 0)) )
names(bfi_df) <- names(bfi_trim)
# let's keep things proportional
gender <- round(table(bfi$gender)/nrow(bfi), digits = 5) #gender proportion
gender #view gender
n <- length(gender)
genders <- as.numeric(names(gender))
gender_vec <- c()
microbenchmark(times = 10, unit = "s",
# growing a vector
gender_vec_grow =
for(i in 1:n) {
gender_vec <- c(gender_vec, rep(genders[i], 1e6 * gender[i]))
},
# vectorized
gender_vec =
rep(genders[1:n], 1e6 * gender[1:n])
)
gender_vec <- rep(genders[1:n], 1e6 * gender[1:n])
bfi_df$gender <- sample(gender_vec) #assigning proportions to gender vector on bfi_df. adding sample randomizes the order of the vector
# let's keep things proportional
age <- round(table(bfi$age)/nrow(bfi), digits = 5)
age #view age proportions
age_vec <- vector()
n <- length(age)
ages <- as.numeric(names(age))
age_vec <- rep(ages[1:n], 1e6 * age[1:n])
bfi_df$age <- sample(age_vec)
set.seed(9201994)
bfi_df <-anMC::mvrnormArma(1e6, mu, cov_m, 0) %>%
t() %>% #transpose
as.data.frame() #get data.frame
names(bfi_df) <- names(bfi_trim)
# let's keep things proportional
gender <- round(table(bfi$gender)/nrow(bfi), digits = 5) #gender proportion
gender #view gender
n <- length(gender)
genders <- as.numeric(names(gender))
gender_vec <- c()
microbenchmark(times = 10, unit = "s",
# growing a vector
gender_vec_grow =
for(i in 1:n) {
gender_vec <- c(gender_vec, rep(genders[i], 1e6 * gender[i]))
},
# vectorized
gender_vec =
rep(genders[1:n], 1e6 * gender[1:n])
)
gender_vec <- rep(genders[1:n], 1e6 * gender[1:n])
bfi_df$gender <- sample(gender_vec) #assigning proportions to gender vector on bfi_df. adding sample randomizes the order of the vector
# let's keep things proportional
age <- round(table(bfi$age)/nrow(bfi), digits = 5)
age #view age proportions
age_vec <- vector()
n <- length(age)
ages <- as.numeric(names(age))
age_vec <- rep(ages[1:n], 1e6 * age[1:n])
bfi_df$age <- sample(age_vec)
# let's keep things proportional
education <- round(table(bfi$education)/nrow(bfi), digits = 5)
education #view education proportions
education_vec <- c()
n <- length(education)
educations <- as.numeric(names(education))
education_vec <- rep(educations[1:n], 1e6 * education[1:n])
bfi_df$education <- sample(education_vec)
# let's keep things proportional
education <- round(table(bfi$education)/nrow(bfi), digits = 5)
education #view education proportions
education_vec <- c()
n <- length(education)
educations <- as.numeric(names(education))
education_vec <- rep(educations[1:n], 1e6 * education[1:n])
bfi_df$education <- sample(education_vec)
glimpse(bfi_df) #always check your data after manipulating the data frame before proceeding
bfi_df[!bfi_df$age]
bfi_df[!bfi_df["age']]
bfi_df[!bfi_df["age"]]
microbenchmark(unit='s',
subset = subset(bfi_df, select= -age),
base = bfi_df[-which(names(bfi_df)=="age")] ,
dplyr = bfi_df %>% select(-age)
)
beepr::beep()
bfi_group <- bfi_df[-which(names(bfi_df)=="age")] #or bfi_df %>% select(-age)
benchmark(
psych_describeBy = psych::describeBy(bfi_group[1:25], list(bfi_group$gender, bfi_group$education), mat=T),
rstatix_groupby = bfi_group %>% group_by(gender, education) %>% get_summary_stats(), #example of piping a chain of 2 functions
replications = 1,
columns = c('test', 'elapsed'),
order = 'elapsed'
)
pacman::p_load(Hmisc, pastecs, rstatix)
bfi_group <- bfi_df[-which(names(bfi_df)=="age")] #or bfi_df %>% select(-age)
benchmark(
psych_describeBy = psych::describeBy(bfi_group[1:25], list(bfi_group$gender, bfi_group$education), mat=T),
rstatix_groupby = bfi_group %>% group_by(gender, education) %>% get_summary_stats(), #example of piping a chain of 2 functions
replications = 1,
columns = c('test', 'elapsed'),
order = 'elapsed'
)
beepr::beep()
?memoise
??memoise
bfi_plot <- pairs.panels(bfi_clean)
bfi_plot <- pairs.panels(bfi_df[1:25])
bfi_df[1:25]
?pairs.panels
bfi_plot <- pairs.panels(bfi_df[1:25])
par(mar=c(1,1,1,1))
bfi_plot <- pairs.panels(bfi_df[1:25])
keys.list <- list(
agree = c("-A1", paste0("A", 2:5)),
conscientious = c(paste0("C",1:3), "-C4", "-C5"),
extraversion = c("-E1", "-E2", paste0("E", 3:5)),
neuroticism = paste0("N",1:5),
openness = c("O1", "-O2", "O3", "O4", "-O5")
)
bfi_scored <- scoreItems(keys.list, bfi_df[1:25])
bfi_scored
bfi_scored$scores
bfi_plot <- pairs.panels(bfi_scored$scores)
pacman::p_load(GGally)
GGally::ggpairs(bfi_scored$scores)
bfi_scored$scores %>% as_tibble() GGally::ggpairs()
bfi_scored$scores %>% as_tibble() %>% GGally::ggpairs()
beepr::beep()
?cohens_d
bfi_df
bfi_tbl <- as_tibble(bfi_df) #converting to tbl_df
glimpse(bfi_tbl)
bfi_tbl <- as_tibble(bfi_df) %>% select(-age) #converting to tbl_df
bfi_tbl <- as_tibble(bfi_df)  #converting to tbl_df & dropping age
bfi_tbl %>%      #grab tbl
pivot_longer(  #pivot BFI items
A1:O5,
names_to = "trait",
values_to = "score"
)
bfi_tbl %>%      #grab tbl
pivot_longer(  #pivot BFI items
A1:O5,
names_to = "trait",
values_to = "score"
) %>%
select(-age, -education) %>%
group_by(trait) %>%
cohen_d(score ~ gender)
bfi_tbl %>%      #grab tbl
pivot_longer(  #pivot BFI items
A1:O5,
names_to = "trait",
values_to = "score"
) %>%
select(-age, -education) %>%
group_by(trait) %>%
cohens_d(score ~ gender)
